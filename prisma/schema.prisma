// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int               @id @default(autoincrement())
  firstName       String
  lastName        String
  email           String            @unique
  phone           String?           @unique
  password        String
  oauthId         String?
  oauthProvider   String?           @default("local")
  userData        UserData?
  comments        Comment[]         @relation("UserToComment")
  resetPassTokens ResetPassToken[]
  orders          Order[]
  cart            Cart?
  ratings         ProductRating[] @relation("UserToProductRating")
  address         Address[]
  messages        ChatMessage[]
  chatRooms       ChatParticipant[]
  UserTests       UserTests[]
  UserTestSeries  UserTestSeries[]
  CategoryRatings CategoryRating[]
  userProgress    UserProgress[]
  userCalendar    UserCalendar[]
  bookmarks       Page[]            @relation("UserBookmark")
  wishList        WishList?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@index([email])
}

model UserData {
  id          Int       @id @default(autoincrement())
  userId      Int       @unique
  tagsCovered String[]
  paidUser    Boolean   @default(false)
  validTill   DateTime?
  rating      Int       @default(250)
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  coupon      Coupon[]  @relation("UserToCoupon" )
}

model ProgressConstraints {
  id          Int      @id @default(autoincrement())
  weakLimit   Int
  strongLimit Int
  xp_status   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model UserProgress {
  id          Int      @id @default(autoincrement())
  userId      Int
  progressMin Int
  progressMax Int
  date        DateTime @default(dbgenerated("CURRENT_DATE"))
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@index([userId])
}

model CategoryRating {
  id         Int      @id @default(autoincrement())
  userId     Int
  categoryId Int
  rating     Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Categories @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([userId, categoryId])
  @@index([userId])
  @@index([categoryId])
}

model UserTests {
  id          Int      @id @default(autoincrement())
  userId      Int
  questionIds Int[]
  response    String
  result      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model UserTestSeries {
  id        Int      @id @default(autoincrement())
  userId    Int
  testId    Int
  response  String
  result    String
  score     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  test TestSeries @relation("UserTestSeries", fields: [testId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model UserCalendar {
  id        Int      @id @default(autoincrement())
  userId    Int
  date      Int
  month     Int
  year      Int
  status    String   @default("pending")
  event     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Template {
  id          String   @id @default(cuid())
  name        String   @unique
  description String   @default("")
  layout      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  pages Page[]

  @@index([name])
}

model Categories {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // One - One relation (History is related to it's unique page)
  pageId Int?
  page   Page? @relation(fields: [pageId], references: [id])

  // One - Many relation (Tree type structure)
  daughterTag Categories[] @relation("TagToTag")
  parentTag   Categories?  @relation("TagToTag", fields: [parentTagId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  parentTagId Int?

  // One - Many relation (Categories to Questions)
  questions QuestionBank[] @relation("TagToQuestionBank")

  CategoryRatings CategoryRating[]

  weight Decimal? @default(0.2)

  @@index([name])
}

// Pre configured tests for the users
model Tests {
  id                    Int      @id @default(autoincrement())
  name                  String
  correctAttempted      Int
  wrongAttempted        Int
  notAttempted          Int
  partialAttempted      Int?
  partialNotAttempted   Int?
  partialWrongAttempted Int?
  timeTaken             Int
  questionsSingle       Int
  questionsMultiple     Int?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@index([name])
}

model TestSeries {
  id                    Int      @id @default(autoincrement())
  name                  String   @unique
  correctAttempted      Int
  wrongAttempted        Int
  notAttempted          Int
  partialAttempted      Int?
  partialNotAttempted   Int?
  partialWrongAttempted Int?
  timeTaken             Int
  questionsSingle       Int
  questionsMultiple     Int?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  users     UserTestSeries[] @relation("UserTestSeries")
  questions QuestionBank[]   @relation("TestSeriesToQuestionBank")

  @@index([name])
}

model QuestionBank {
  id                  Int      @id @default(autoincrement())
  question            String
  answer              String
  options             String[]
  explaination        String   @default("")
  creatorName         String   @default("")
  pyq                 Boolean  @default(false)
  multipleCorrectType Boolean  @default(false)
  year                Int?
  totalAttempts       Int?     @default(0)
  correctAttempts     Int?     @default(0)
  rating              Int?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Test series to question bank relation
  testSeries TestSeries[] @relation("TestSeriesToQuestionBank")

  // One - Many relation (Categories to Questions)
  categories Categories @relation("TagToQuestionBank", fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId Int
}

model Tags {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Many - Many relation between Tags and Pages
  pages        Page[]                     @relation("TagToPage")
  blogs        Blogs[]                    @relation("TagToBlog")
  currentBlogs CurrentAffairArticleBlog[] @relation("TagToCurrentBlog")

  @@index([name])
}

model Page {
  id             Int     @id @default(autoincrement())
  slug           String  @unique
  title          String
  content        String
  link           String?
  metadata       String?
  status         String  @default("draft")
  imageUrl       String?
  questionNumber Int?
  FAQ            String? @default("")

  categories Categories[] @relation()

  bookmarkBy User[] @relation("UserBookmark")

  tags Tags[] @relation("TagToPage")

  authorId Int?
  author   Author? @relation("AuthorToPage", fields: [authorId], references: [id])

  adminId Int?
  admin   Admin? @relation("AdminToPage", fields: [adminId], references: [id])

  templateId String
  template   Template @relation(fields: [templateId], references: [id])

  parentId Int?
  parent   Page? @relation("PageToPage", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  children Page[]     @relation("PageToPage")
  comments Comment[]  @relation("PageToComment")
  chatRoom ChatRoom[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  level     Int      @default(1)
  showInNav Boolean  @default(true)
  order     Int      @default(0)

  @@index([parentId])
  @@index([slug])
  @@index([level])
  @@index([level, order, createdAt])
}

model Comment {
  id      Int    @id @default(autoincrement())
  content String

  userId Int
  user   User @relation("UserToComment", fields: [userId], references: [id], onDelete: Cascade)

  pageSlug String?
  page     Page?   @relation("PageToComment", fields: [pageSlug], references: [slug], onDelete: Cascade)

  commentId Int?
  comment   Comment? @relation("CommentToComment", fields: [commentId], references: [id], onDelete: Cascade)

  replies Comment[] @relation("CommentToComment")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([pageSlug])
  @@index([commentId])
}

model CurrentAffairArticleBlog {
  id                   Int                  @id @default(autoincrement())
  title                String
  content              String
  slug                 String               @unique
  author               String
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  parentSlug           String
  currentAffairArticle CurrentAffairArticle @relation("CurrentAffairArticleToBlog", fields: [parentSlug], references: [slug], onDelete: Cascade, onUpdate: Cascade)

  tags Tags[] @relation("TagToCurrentBlog")

  @@index([slug])
  @@index([parentSlug])
}

model CurrentAffairArticle {
  id            Int           @id @default(autoincrement())
  title         String
  content       String
  link          String?
  metadata      String?
  slug          String        @unique
  author        String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  quizQuestions String?
  parentSlug    String
  currentAffair CurrentAffair @relation(fields: [parentSlug], references: [slug], onDelete: Cascade, onUpdate: Cascade)

  blogs CurrentAffairArticleBlog[] @relation("CurrentAffairArticleToBlog")

  @@index([slug])
  @@index([parentSlug])
}

model CurrentAffair {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  link      String?
  metadata  String?
  imageUrl  String?
  type      String // daily, monthly, yearly
  slug      String   @unique
  order     Int      @default(0)
  showInNav Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  dailyArticle CurrentAffairArticle[]

  @@index([slug])
}

model AuthToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  type      String   @default("User")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model About99Notes {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ResetPassToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Admin {
  id        Int      @id @default(autoincrement())
  name      String   @default("99Notes")
  image     String?  @default("")
  email     String   @unique
  password  String
  secretKey String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  pages Page[] @relation("AdminToPage")
}

model AdminLogs {
  id        Int      @id @default(autoincrement())
  method    String
  endpoint  String
  status    String
  user      String?
  userId    Int?
  details   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AdminMessages {
  id        Int      @id @default(autoincrement())
  type      String
  ratingS   Int?     @default(0)
  ratingE   Int?     @default(0)
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AdminOps {
  id                 Int      @id @default(autoincrement())
  globalRestrictions Boolean  @default(false)
  globalHeadScripts  String[] @default([])
  globalBodyScripts  String[] @default([])
  globalCss          String   @default("")
  practiceQuestions  Int      @default(0)
}

model Editor {
  id          Int      @id @default(autoincrement())
  name        String   @default("")
  image       String   @default("")
  description String   @default("")
  email       String   @unique
  password    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Author {
  id         Int      @id @default(autoincrement())
  name       String   @default("")
  email      String   @unique
  image      String?  @default("")
  desciption String?
  password   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  pages Page[] @relation("AuthorToPage")
}

model FormData {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  phone     String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Blogs {
  id        Int      @id @default(autoincrement())
  slug      String   @unique
  title     String
  content   String
  metadata  String?
  imageUrl  String?
  tags      Tags[]   @relation("TagToBlog")
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([slug])
}

// ------------------------------------------------------------------------------------------ Ecommerce

model Category {
  id          Int    @id @default(autoincrement())
  name        String
  description String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products Product[]

  @@index([name])
}

model Product {
  id          Int         @id @default(autoincrement())
  name        String
  description String
  price       Float
  salePrice   Float?
  stock       Int
  imageUrl    String?
  categoryId  Int
  shippingCharges Float @default(50)
  type ProductType @default(softCopy)
  validity    Int?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  orderItem   OrderItem[]
  cartItem    CartItem[]
  inventory   Inventory?
  wishList    WishList[]
  ratings     ProductRating[] @relation("ProductToProductRating")

  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@index([name])
}

model ProductRating {
  id          Int      @id @default(autoincrement())
  userId      Int      
  productId   Int
  rating      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation("UserToProductRating", fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation("ProductToProductRating", fields: [productId], references: [id], onDelete: Cascade)
}
model Order {
  id          Int         @id @default(autoincrement())
  orderDate   DateTime    @default(now())
  totalAmount Float
  status      OrderStatus
  userId      Int
  orderItems  OrderItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  shipping    Shipping[]
  payment     Payment[]

  billingAddressId Int?
  billingAddress   Address? @relation("BillingAddress", fields: [billingAddressId], references: [id], onDelete: Cascade)

  shippingAddressId Int?
  shippingAddress   Address? @relation("ShippingAddress", fields: [shippingAddressId], references: [id], onDelete: Cascade)
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model OrderItem {
  id        Int   @id @default(autoincrement())
  quantity  Int
  price     Float
  orderId   Int
  productId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Cart {
  id          Int        @id @default(autoincrement())
  userId      Int        @unique
  totalAmount Float
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  cartItems   CartItem[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CartItem {
  id        Int @id @default(autoincrement())
  quantity  Int
  cartId    Int
  productId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cart    Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Inventory {
  id        Int      @id @default(autoincrement())
  quantity  Int
  productId Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Shipping {
  id              Int      @id @default(autoincrement())
  shippingAddress String
  trackingNumber  String
  carrier         String
  shippingDate    DateTime
  orderId         Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Address {
  id           Int      @id @default(autoincrement())
  userId       Int
  addressLine1 String
  addressLine2 String
  city         String
  state        String
  zipCode      String
  country      String
  phoneNumber  String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  billingOrders  Order[] @relation("BillingAddress")
  shippingOrders Order[] @relation("ShippingAddress")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model WishList {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products Product[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Payment {
  id                    Int      @id @default(autoincrement())
  orderId               Int
  paymentMethod         String
  amount                Float
  status                String
  phonepe_transactionId String
  phonepe_signature     String
  redirectUrl           String
  paymentDate           DateTime
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Coupon {
  id          Int      @id @default(autoincrement())
  code        String   @unique
  discount    Float
  validity    Int
  type        String
  usageLimit  Int?     // Maximum number of times this coupon can be used
  timesUsed   Int      @default(0) // How many times the coupon has been used
  isActive    Boolean  @default(true) // Admin toggle to enable/disable the coupon
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users UserData[] @relation("UserToCoupon")
}

// ------------------------------------------------------------------------------------------ End Ecommerce

// ------------------------------------------------------------------------------------------ Start Live Chat

model ChatRoom {
  id           Int               @id @default(autoincrement())
  articleId    Int
  article      Page              @relation(fields: [articleId], references: [id], onDelete: Cascade)
  messages     ChatMessage[]
  participants ChatParticipant[]
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt

  @@index([articleId])
}

model ChatMessage {
  id         Int         @id @default(autoincrement())
  chatRoomId Int
  userId     Int
  user       User        @relation(fields: [userId], references: [id])
  chatRoom   ChatRoom    @relation(fields: [chatRoomId], references: [id])
  content    String
  type       MessageType @default(TEXT)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([chatRoomId])
  @@index([userId])
}

model ChatParticipant {
  id         Int      @id @default(autoincrement())
  userId     Int
  chatRoomId Int
  joinedAt   DateTime @default(now())

  chatRoom ChatRoom @relation(fields: [chatRoomId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  @@unique([userId, chatRoomId])
}

// ------------------------------------------------------------------------------------------ End Live Chat

// ------------------------------------------------------------------------------------------ ENUMs

enum OrderType {
  Articles
  Books
  Notes
}
enum ProductType {
  softCopy
  hardCopy
}
enum OrderStatus {
  Pending
  Completed
  Failed
  Canceled
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  SYSTEM
}
